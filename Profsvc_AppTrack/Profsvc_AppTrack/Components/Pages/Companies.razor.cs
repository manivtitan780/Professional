#region Header

// /*****************************************
// Copyright:           Titan-Techs.
// Location:            Newtown, PA, USA
// Solution:            ProfSvc_AppTrack
// Project:             ProfSvc_AppTrack
// File Name:           Companies.razor.cs
// Created By:          Narendra Kumaran Kadhirvelu, Jolly Joseph Paily, DonBosco Paily, Mariappan Raja
// Created On:          12-09-2022 15:57
// Last Updated On:     08-31-2023 20:41
// *****************************************/

#endregion

using Profsvc_AppTrack.Components.Code;
using Profsvc_AppTrack.Components.Pages.Controls.Companies;

using AdvancedCompanySearch = Profsvc_AppTrack.Components.Pages.Controls.Companies.AdvancedCompanySearch;
using BasicInfoCompanyPanel = Profsvc_AppTrack.Components.Pages.Controls.Companies.BasicInfoCompanyPanel;
using DocumentsCompanyPanel = Profsvc_AppTrack.Components.Pages.Controls.Companies.DocumentsCompanyPanel;
using EditCompanyDialog = Profsvc_AppTrack.Components.Pages.Controls.Companies.EditCompanyDialog;
using EditContactDialog = Profsvc_AppTrack.Components.Pages.Controls.Companies.EditContactDialog;

namespace Profsvc_AppTrack.Components.Pages;

/// <summary>
///     The Companies class represents a page in the application that provides functionality to view, edit, and manage
///     companies.
///     It includes features such as searching for a company, adding a new company, editing existing company details, and
///     managing company contacts and documents.
///     The Companies page also includes a grid view for displaying company data, and supports pagination and sorting.
/// </summary>
public partial class Companies
{
    private bool _actionProgress;

    //private bool _clickInProgress;
    private List<CompanyContact> _companyContactsObject = [];
    private CompanyDetails _companyDetailsObject = new(), _companyDetailsObjectClone = new();
    private List<RequisitionDocuments> _companyDocumentsObject = [];
    private List<Requisitions> _companyRequisitionsObject = [];

    private int _currentPage = 1, _selectedTab;

    private List<IntValues> _education, _eligibility, _experience, _skills, _states, _titles;

    private bool _isSpeedDial;
    private List<KeyValues> _jobOptions, _recruiters;

    private string _lastValue = "";

    private List<Role> _roles;
    private readonly List<IntValues> _statesCopy = [];
    private List<StatusCode> _statusCodes;

    private Company _target;
    private List<AppWorkflow> _workflows;

    /// <summary>
    ///     Gets a MemoryStream instance that represents the document added in the Companies page.
    /// </summary>
    /// <remarks>
    ///     This property is used in the process of uploading a document in the Companies page.
    ///     The MemoryStream instance is filled with the content of the uploaded file in the `UploadDocument` method,
    ///     and then it is used in the `SaveDocument` method where it is converted to a byte array and sent as a part of the
    ///     request to the API.
    /// </remarks>
    private MemoryStream AddedDocument
    {
        get;
    } = new();

    /// <summary>
    ///     Gets or sets the formatted address of a company as a MarkupString.
    /// </summary>
    /// <remarks>
    ///     This property is used to store the address of a company in a format suitable for display in the user interface.
    ///     The address is generated by the `SetupAddress` method, which concatenates the address, city, state, and zip code of
    ///     the company into a single string.
    ///     The string is then converted to a MarkupString, which allows it to be rendered as HTML in the Razor view.
    /// </remarks>
    private MarkupString Address
    {
        get;
        set;
    }

    /// <summary>
    ///     Gets or sets the value for the autocomplete functionality in the Companies page.
    /// </summary>
    private string AutocompleteValue
    {
        get;
        set;
    }

    /// <summary>
    ///     A static list of Company objects. This list is used to store and manage the companies data
    ///     that is displayed on the Companies page. It is used in various operations such as searching,
    ///     editing, and managing companies. The list is also used to populate the grid view on the Companies page.
    /// </summary>
    internal static List<Company> CompaniesList
    {
        get;
        set;
    }

    /// <summary>
    ///     A static list of CompanyContact objects. This list is used to store and manage the company contacts data
    ///     that is displayed on the Companies page. It is used in various operations such as searching,
    ///     editing, and managing company contacts. The list is also used to populate the related sections on the Companies
    ///     page.
    /// </summary>
    internal static List<CompanyContact> CompanyContacts
    {
        get;
        set;
    }

    /// <summary>
    ///     Gets or sets the instance of the BasicInfoCompanyPanel component used in the Companies page.
    ///     This component is used to display and manage the basic information of a company.
    ///     The ContactPanel property is bound to the BasicInfoCompanyPanel component in the Companies.razor file.
    /// </summary>
    public BasicInfoCompanyPanel ContactPanel
    {
        get;
        set;
    }

    /// <summary>
    ///     Gets or sets the total count of Companies.
    /// </summary>
    /// <remarks>
    ///     This property is used to store the total count of companies retrieved from the API response in the
    ///     `General.GetCompanyReadAdaptor()` method.
    /// </remarks>
    public static decimal Count
    {
        get;
        set;
    }

    /// <summary>
    ///     Gets or sets the dialog for adding a company document.
    /// </summary>
    /// <remarks>
    ///     This property is used to manage the dialog for adding a company document in the Companies page.
    ///     It is an instance of the `AddRequisitionDocument` component, which allows the user to upload a document to a
    ///     company.
    ///     The dialog is shown when the `AddDocument` method is called.
    /// </remarks>
    private AddCompanyDocument DialogDocument
    {
        get;
        set;
    }

    /// <summary>
    ///     Gets or sets the dialog for editing company details.
    /// </summary>
    /// <remarks>
    ///     This property is used to handle the dialog box for editing company details. It is an instance of the
    ///     `EditCompanyDetails`
    ///     class.
    ///     The dialog is shown when the `ShowDialog()` method is called in the `EditCompany()` method of the `Companies`
    ///     class.
    /// </remarks>
    private EditCompanyDialog DialogEditCompany
    {
        get;
        set;
    }

    /// <summary>
    ///     Gets or sets the instance of the EditContactDialog component used in the Companies page.
    ///     This component is used to display and manage the contact information of a company in a dialog.
    ///     The DialogEditContact property is bound to the EditContactDialog component in the Companies.razor file.
    /// </summary>
    private EditContactDialog DialogEditContact
    {
        get;
        set;
    }

    /// <summary>
    ///     Gets or sets the instance of the AdvancedCompanySearch component used in the Companies page.
    ///     This component is used to provide advanced search functionality for companies.
    ///     The DialogSearch property is bound to the AdvancedCompanySearch component in the Companies.razor file.
    /// </summary>
    private AdvancedCompanySearch DialogSearch
    {
        get;
        set;
    }

    /// <summary>
    ///     Gets or sets the display status of the Add button.
    /// </summary>
    /// <remarks>
    ///     This property is used to control the visibility of the Add button in the Companies page.
    ///     If the user has the right to edit the company, the display status is set to "unset", otherwise it is set to "none".
    /// </remarks>
    private string DisplayAdd
    {
        get;
        set;
    }

    /// <summary>
    ///     Gets or sets the instance of the DocumentsCompanyPanel component used in the Companies page.
    ///     This component is used to display and manage the documents associated with a company.
    ///     The DocumentsPanel property is bound to the DocumentsCompanyPanel component in the Companies.razor file.
    /// </summary>
    private DocumentsCompanyPanel DocumentsPanel
    {
        get;
        set;
    }

    /// <summary>
    ///     Gets or sets the index of the last record in the current page of companies.
    ///     This value is calculated as the index of the first record of the current page plus the number of companies in the
    ///     current page.
    /// </summary>
    internal static int EndRecord
    {
        get;
        set;
    }

    /// <summary>
    ///     Gets or sets the name of the file being uploaded.
    /// </summary>
    /// <remarks>
    ///     This property is used to store the name of the file that is being uploaded in the `Companies.UploadDocument()`
    ///     method.
    ///     It is then used in the `Companies.SaveDocument()` method to add the file to the request for the API call.
    /// </remarks>
    private string FileName
    {
        get;
        set;
    }

    /// <summary>
    ///     Represents a static grid of CompanyClass objects in the Companies page.
    /// </summary>
    /// <remarks>
    ///     This grid is used to display and manipulate data related to companies.
    ///     It is refreshed when changes are made to the companies data, such as sorting, filtering, changing item count, or
    ///     converting a company.
    /// </remarks>
    private static SfGrid<Company> Grid
    {
        get;
        set;
    }

    /// <summary>
    ///     Gets or sets the instance of the IJSRuntime interface. This interface provides methods for interacting with
    ///     JavaScript from .NET code.
    /// </summary>
    /// <remarks>
    ///     The IJSRuntime instance is used to invoke JavaScript functions from .NET code. In the Companies class, it is used
    ///     to open a new browser tab for document download in the `Companies.DownloadDocument()` method.
    /// </remarks>
    [Inject]
    private IJSRuntime JsRuntime
    {
        get;
        set;
    }

    /// <summary>
    ///     Gets or sets an instance of the ILocalStorageService.
    ///     This service is used for managing local storage in the application.
    ///     It is used to store and retrieve the state of the Companies grid, including search parameters and pagination.
    /// </summary>
    [Inject]
    private ILocalStorageService LocalStorage
    {
        get;
        set;
    }

    /// <summary>
    ///     Gets or sets the user's login information.
    /// </summary>
    /// <remarks>
    ///     This property is used to store the user's login information retrieved from the memory cache in the
    ///     `OnInitializedAsync()` method.
    ///     It is also used in the `SaveDocument()` method to determine the user ID for the document upload request.
    ///     If the user is not logged in, the user ID defaults to "JOLLY".
    /// </remarks>
    private LoginCooky LoginCookyUser
    {
        get;
        set;
    }

    /// <summary>
    ///     Gets or sets the MIME type of the file being uploaded.
    /// </summary>
    /// <remarks>
    ///     This property is used to store the MIME type of the file being uploaded in the `Companies.UploadDocument()` method.
    ///     The MIME type is retrieved from the FileInfo of the uploaded file.
    ///     It is then used as a parameter in the API request in the `Companies.SaveDocument()` method.
    /// </remarks>
    private string Mime
    {
        get;
        set;
    }

    /// <summary>
    ///     Gets or sets the instance of the NavigationManager service used in the Companies page.
    ///     This service provides methods and properties to manage and interact with the URI of the application.
    ///     It is used for tasks such as navigating to different pages and constructing URIs for use within the application.
    ///     For example, it is used in the `DownloadDocument` method to construct a URI for downloading a document.
    /// </summary>
    [Inject]
    private NavigationManager NavManager
    {
        get;
        set;
    }

    /// <summary>
    ///     Gets or sets a new instance of the RequisitionDocuments class.
    /// </summary>
    private RequisitionDocuments NewDocument
    {
        get;
        set;
    } = new();

    /// <summary>
    ///     Gets or sets the total number of pages that can be formed from the companies data.
    ///     This is calculated by dividing the total count of companies by the number of items per page, and rounding up to the
    ///     next integer.
    /// </summary>
    public static int PageCount
    {
        get;
        set;
    }

    /// <summary>
    ///     Gets or sets the RoleID associated with the Company.
    /// </summary>
    private string RoleID
    {
        get;
        set;
    }

    /// <summary>
    ///     Gets or sets the SearchModel property of the Companies class. This property is of type CompaniesSearch and is used
    ///     to manage
    ///     search criteria for companies.
    /// </summary>
    private static CompanySearch SearchModel
    {
        get;
        set;
    } = new();

    /// <summary>
    ///     Gets or sets a clone of the CompanySearch model. This clone is used to manage the state of the search functionality
    ///     in the Companies page. It holds the search parameters and criteria used to filter and display the company data in
    ///     the grid view.
    /// </summary>
    private CompanySearch SearchModelClone
    {
        get;
        set;
    } = new();

    /// <summary>
    ///     Gets or sets a clone of the selected contact from the company.
    ///     This clone is used to hold a copy of the selected contact's data, allowing modifications without affecting the
    ///     original data.
    /// </summary>
    private CompanyContact SelectedContactClone
    {
        get;
        set;
    } = new();

    /// <summary>
    ///     Gets or sets the selected RequisitionDocuments instance for download.
    /// </summary>
    /// <remarks>
    ///     This property is used to store the selected document for download in the `Companies.DownloadDocument()` method.
    ///     The selected document is determined by the `PanelDocument.SelectedRow`.
    /// </remarks>
    private RequisitionDocuments SelectedDownload
    {
        get;
        set;
    } = new();

    /// <summary>
    ///     Gets or sets the session storage service that is used to store and retrieve the state of the Companies grid.
    ///     This includes the current page, search model, sort field, sort direction, and autocomplete value.
    ///     The session storage service is used to persist the state of the Companies grid across different user sessions.
    /// </summary>
    [Inject]
    private ISessionStorageService SessionStorage
    {
        get;
        set;
    }

    /// <summary>
    ///     A static list of IntValues objects. This list is used to store and manage the skills data
    ///     associated with companies that is retrieved from the API response in the
    ///     `General.GetCompanyReadAdaptor()` method.
    /// </summary>
    /// <summary>
    ///     A static list of IntValues objects. This list is used to store and manage the skills data
    ///     associated with companies that is retrieved from the API response in the
    ///     `General.GetCompanyReadAdaptor()` method.
    /// </summary>
    internal static List<IntValues> Skills
    {
        get;
        set;
    }

    /// <summary>
    ///     Gets or sets the sort direction for the companies data.
    /// </summary>
    /// <remarks>
    ///     This property is used to determine the order in which the companies are displayed.
    ///     It is set in the `OnInitializedAsync` method based on the `SearchModel.SortDirection` value.
    ///     It is also used in the `BuildRenderTree` method to set the `Direction` attribute of the `GridSortColumn` component.
    /// </remarks>
    private SortDirection SortDirectionProperty
    {
        get;
        set;
    } = SortDirection.Ascending;

    /// <summary>
    ///     Gets or sets the field by which the companies data is sorted.
    /// </summary>
    /// <remarks>
    ///     This property is used to determine the field (such as "Company", "Location", "Industry", "Status", or "Updated")
    ///     by which the companies data is sorted in the Companies page. The sorting field is set in the `OnInitializedAsync`
    ///     method
    ///     based on the `SearchModel.SortField` value.
    /// </remarks>
    private string SortField
    {
        get;
        set;
    } = "Updated";

    /// <summary>
    ///     Gets or sets the instance of the SfSpinner component.
    /// </summary>
    /// <remarks>
    ///     This property is used to manage the spinner in the Companies page.
    ///     The spinner is shown by calling the `ShowAsync` method and hidden by calling the `HideAsync` method of this
    ///     property.
    ///     For example, it is used in the `Companies.DetailDataBind()` and `Companies.EditCompany()` methods to indicate a
    ///     loading state
    ///     while performing asynchronous operations.
    /// </remarks>
    private SfSpinner Spinner
    {
        get;
        set;
    } = new();

    /// <summary>
    ///     Gets or sets the starting record number for the current page of companies.
    ///     This value is calculated as ((_page - 1) * _itemCount + 1).
    /// </summary>
    internal static int StartRecord
    {
        get;
        set;
    }

    /// <summary>
    ///     Gets or sets the title for the Companies page.
    /// </summary>
    private static string Title
    {
        get;
        set;
    } = "Edit";

    /// <summary>
    ///     Gets or sets the User of the Company. This property is used to store the UserID of the currently logged in
    ///     user.
    ///     It is used in the Company page to control the display of certain elements based on the user's rights and
    ///     whether they are the updater of the record.
    /// </summary>
    /// <remarks>
    ///     This property is a string that holds the UserID of the currently logged in user. It is used in the Company page
    ///     to control the display of certain elements. If the logged in user has the right to edit a candidate and they are
    ///     the updater of the record, certain elements on the page will be displayed. Otherwise, those elements will be
    ///     hidden.
    /// </remarks>
    private string User
    {
        get;
        set;
    }

    /// <summary>
    ///     Gets or sets the user rights for the Companies page.
    /// </summary>
    /// <value>
    ///     The user rights associated with the Companies page.
    /// </value>
    /// <remarks>
    ///     This property represents the permissions a user has when interacting with the Companies page.
    ///     These permissions are encapsulated in the UserRights class, which includes rights such as viewing, editing, and
    ///     changing the status of candidates, requisitions, and companies, among others.
    /// </remarks>
    private UserRights UserRights
    {
        get;
        set;
    } = new();

    /// <summary>
    ///     Asynchronously adds a new document to the company.
    ///     This method is invoked when the user clicks on the "Add Document" button in the Companies page.
    ///     It first checks if the NewDocument object is null, and if so, it creates a new instance of it.
    ///     If the NewDocument object is not null, it clears its data.
    ///     After these checks and operations, it shows the AddCompanyDocument dialog for the user to add a new document.
    /// </summary>
    /// <returns>A task that represents the asynchronous operation.</returns>
    private async Task AddDocument()
    {
        await Task.Yield();

        if (NewDocument == null)
        {
            NewDocument = new();
        }
        else
        {
            NewDocument.Clear();
        }

        await DialogDocument.Dialog.ShowAsync();
    }

    /// <summary>
    ///     Initiates the advanced search functionality in the Companies page.
    ///     This method creates a copy of the current search model and opens the advanced search dialog.
    /// </summary>
    /// <returns>A task that represents the asynchronous operation.</returns>
    private async Task AdvancedSearch()
    {
        await Task.Yield();
        SearchModelClone ??= new();
        SearchModelClone = SearchModel.Copy();
        await DialogSearch.ShowDialog();
    }

    /// <summary>
    ///     This method is invoked after a document is processed in the Companies page.
    ///     It enables the buttons in the AddCompanyDocument dialog, allowing further user interaction.
    /// </summary>
    /// <param name="arg">The arguments associated with the completion of the document processing action.</param>
    private void AfterDocument(ActionCompleteEventArgs arg)
    {
        DialogDocument.EnableButtons();
    }

    /// <summary>
    ///     Asynchronously retrieves all companies, regardless of their names.
    ///     This method resets the search parameters, sets the current page to the first page, and refreshes the grid view.
    ///     This method is intended to be used when the user wants to view all companies without any filters.
    /// </summary>
    /// <returns>A task that represents the asynchronous operation.</returns>
    private async Task AllAlphabet()
    {
        if (!_actionProgress)
        {
            _actionProgress = true;
            SearchModel.CompanyName = "";
            _currentPage = 1;
            SearchModel.Page = 1;
            await SessionStorage.SetItemAsync("CompaniesGrid", SearchModel);
            AutocompleteValue = "";
            await Grid.Refresh();
            _actionProgress = false;
        }
    }

    /// <summary>
    ///     This method is invoked before the upload process of a document in the Companies page.
    ///     It disables the buttons in the AddCompanyDocument dialog to prevent any other actions during the upload process.
    /// </summary>
    /// <param name="arg">The arguments associated with the BeforeUpload event.</param>
    private void BeforeDocument(BeforeUploadEventArgs arg)
    {
        DialogDocument.DisableButtons();
    }

    /// <summary>
    ///     Asynchronously changes the number of items displayed on the Companies page.
    ///     This method is triggered when the user changes the item count in the grid view.
    ///     It updates the item count in the SearchModel, saves the updated SearchModel in the session storage,
    ///     and refreshes the grid view to reflect the new item count.
    ///     The method ensures that only one change operation is in progress at a time.
    /// </summary>
    /// <param name="item">
    ///     An instance of ChangeEventArgs containing the new item count.
    /// </param>
    /// <returns>
    ///     A Task that represents the asynchronous operation.
    /// </returns>
    private async Task ChangeItemCount(ChangeEventArgs<int, IntValues> item)
    {
        if (!_actionProgress)
        {
            _actionProgress = true;
            _currentPage = 1;
            SearchModel.Page = 1;
            SearchModel.ItemCount = item.Value;

            await SessionStorage.SetItemAsync("CompaniesGrid", SearchModel);
            await Grid.Refresh();
            StateHasChanged();
            _actionProgress = false;
        }
    }

    /// <summary>
    ///     Asynchronously clears the current filter applied to the company data grid.
    ///     This method resets the search model, sets the current page to the first one, and refreshes the grid.
    ///     The method also stores the updated search model in the session storage.
    ///     If the method is called while another action is in progress, it will not execute.
    /// </summary>
    private async Task ClearFilter()
    {
        if (!_actionProgress)
        {
            _actionProgress = true;
            int _currentPageItemCount = SearchModel.ItemCount;
            SearchModel.Clear();
            _currentPage = 1;
            SearchModel.Page = 1;
            SearchModel.ItemCount = _currentPageItemCount;
            SearchModel.User = User;
            await SessionStorage.SetItemAsync("CompaniesGrid", SearchModel);
            AutocompleteValue = "";
            await Grid.Refresh();
            StateHasChanged();
            _actionProgress = false;
        }
    }

    /// <summary>
    ///     The DataHandler method is an asynchronous task that is responsible for handling data-related operations on the
    ///     Companies page.
    ///     It creates a .NET reference to the Companies class instance and invokes a JavaScript function named "detail" with
    ///     this reference.
    ///     If the total item count in the Grid is greater than zero, it selects the first row asynchronously.
    /// </summary>
    /// <param name="obj">An object that can be used to pass additional data to the method.</param>
    /// <returns>A Task representing the asynchronous operation.</returns>
    private async Task DataHandler(object obj)
    {
        DotNetObjectReference<Companies> _dotNetReference = DotNetObjectReference.Create(this); // create dotnet ref
        await Runtime.InvokeAsync<string>("detail", _dotNetReference);
        //  send the dotnet ref to JS side
        if (Grid.TotalItemCount > 0)
        {
            await Grid.SelectRowAsync(0);
        }
    }

    /// <summary>
    ///     Asynchronously deletes a contact associated with a company.
    ///     This method sends a POST request to the "Company/DeleteContact" endpoint with the contact's ID, the company's ID
    ///     and name, and the user's ID.
    ///     If the response is not null, it deserializes the "Contacts" field from the response into a list of CompanyContact
    ///     objects.
    /// </summary>
    /// <param name="id">The ID of the contact to be deleted.</param>
    /// <returns>A Task representing the asynchronous operation.</returns>
    private async Task DeleteContact(int id)
    {
        await Task.Yield();
        try
        {
            using RestClient _client = new($"{Start.ApiHost}");
            RestRequest _request = new("Company/DeleteContact", Method.Post)
            {
                RequestFormat = DataFormat.Json
            };
            _request.AddQueryParameter("id", id.ToString());
            _request.AddQueryParameter("companyID", _target.ID);
            _request.AddQueryParameter("companyName", _target.CompanyName);
            _request.AddQueryParameter("user", User);

            Dictionary<string, object> _response = await _client.PostAsync<Dictionary<string, object>>(_request);
            if (_response == null)
            {
                return;
            }

            _companyContactsObject = General.DeserializeObject<List<CompanyContact>>(_response["Contacts"]);
        }
        catch
        {
            //
        }
    }

    /// <summary>
    ///     Asynchronously deletes a company document.
    ///     This method sends a POST request to the "Company/DeleteCompanyDocument" endpoint with the document ID and user ID
    ///     as query parameters.
    ///     If the user ID is null or whitespace, "JOLLY" is used as the default user ID.
    ///     After the request is sent, the method deserializes the response into a list of RequisitionDocuments and assigns it
    ///     to the '_companyDocumentsObject'.
    ///     If the response is null, the method returns immediately.
    /// </summary>
    /// <param name="arg">The ID of the document to be deleted.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    private async Task DeleteDocument(int arg)
    {
        await Task.Yield();
        try
        {
            RestClient _client = new($"{Start.ApiHost}");
            RestRequest _request = new("Company/DeleteCompanyDocument", Method.Post)
            {
                RequestFormat = DataFormat.Json
            };
            _request.AddQueryParameter("documentID", arg.ToString());
            _request.AddQueryParameter("user", User);

            Dictionary<string, object> _response = await _client.PostAsync<Dictionary<string, object>>(_request);
            if (_response == null)
            {
                return;
            }

            _companyDocumentsObject = General.DeserializeObject<List<RequisitionDocuments>>(_response["Document"]);
        }
        catch
        {
            //
        }
    }

    /// <summary>
    ///     Asynchronously binds data to the detail row of the Companies page grid view.
    ///     This method is triggered when a detail row in the grid view is being bound.
    ///     It fetches the detailed information of a company, including its contacts, documents, and requisitions,
    ///     from a RESTful API and sets up the address for the company.
    ///     It also manages the visibility of a spinner during the data fetching process.
    ///     The method ensures that only one detail row can be expanded at a time.
    /// </summary>
    /// <param name="company">
    ///     The event arguments containing the data of the company that is being bound to the detail row.
    /// </param>
    /// <returns>
    ///     A <see cref="Task" /> representing the asynchronous operation.
    /// </returns>
    private async Task DetailDataBind(DetailDataBoundEventArgs<Company> company)
    {
        if (!_actionProgress)
        {
            _actionProgress = true;
            if (_target != null && _target != company.Data)
            {
                // return when target is equal to args.data
                await Grid.ExpandCollapseDetailRowAsync(_target);
            }

            int _index = await Grid.GetRowIndexByPrimaryKeyAsync(company.Data.ID);
            if (_index != Grid.SelectedRowIndex)
            {
                await Grid.SelectRowAsync(_index);
            }

            _target = company.Data;

            await Task.Yield();

            try
            {
                await Spinner.ShowAsync();
            }
            catch
            {
                //
            }

            RestClient _restClient = new($"{Start.ApiHost}");
            RestRequest request = new("Company/GetCompanyDetails");
            request.AddQueryParameter("companyID", _target.ID);
            request.AddQueryParameter("user", LoginCookyUser.UserID);

            Dictionary<string, object> _restResponse = await _restClient.GetAsync<Dictionary<string, object>>(request);

            if (_restResponse != null)
            {
                _companyDetailsObject = JsonConvert.DeserializeObject<CompanyDetails>(_restResponse["Company"]?.ToString() ?? string.Empty);
                _companyContactsObject = General.DeserializeObject<List<CompanyContact>>(_restResponse["Contacts"]);
                _companyDocumentsObject = General.DeserializeObject<List<RequisitionDocuments>>(_restResponse["Document"]);
                _companyRequisitionsObject = General.DeserializeObject<List<Requisitions>>(_restResponse["Requisitions"]);
                SetupAddress();
            }

            _selectedTab = 0;

            await Task.Yield();
            try
            {
                await Spinner.HideAsync();
            }
            catch
            {
                //
            }

            _actionProgress = false;
        }
    }

    /// <summary>
    ///     Collapses the detail row in the Companies page grid view. This method is invoked from JavaScript.
    /// </summary>
    [JSInvokable("DetailCollapse")]
    public void DetailRowCollapse() => _target = null;

    /// <summary>
    ///     Asynchronously downloads a document associated with a company.
    ///     This method is triggered when the user initiates a document download action.
    ///     It first checks if another action is in progress, and if not, it sets the action progress flag to true.
    ///     It then selects the document to be downloaded from the DocumentsPanel and constructs a query string from the
    ///     document's details.
    ///     The method then invokes a JavaScript function to open a new browser tab and initiate the download.
    ///     Once the download is initiated, the action progress flag is set back to false.
    /// </summary>
    /// <param name="arg">The ID of the document to be downloaded.</param>
    /// <returns>A Task representing the asynchronous operation.</returns>
    private async Task DownloadDocument(int arg)
    {
        if (!_actionProgress)
        {
            await Task.Yield();
            _actionProgress = true;
            SelectedDownload = DocumentsPanel.SelectedRow;
            string _queryString = (SelectedDownload.DocumentFileName + "^" + _target.ID + "^" + SelectedDownload.OriginalFileName + "^2").ToBase64String();
            await JsRuntime.InvokeVoidAsync("open", $"{NavManager.BaseUri}Download/{_queryString}", "_blank");
            _actionProgress = false;
        }
    }

    /// <summary>
    ///     Initiates the process of editing a company's details. If the company's ID is 0, it prepares for adding a new
    ///     company.
    ///     Otherwise, it prepares for editing an existing company. The method also manages the display of the EditCompany
    ///     dialog.
    /// </summary>
    /// <param name="id">The ID of the company to be edited. If the ID is 0, a new company will be added.</param>
    /// <returns>A Task that represents the asynchronous operation.</returns>
    private async Task EditCompany(int id)
    {
        if (!_actionProgress)
        {
            await Task.Yield();
            _actionProgress = true;
            if (id == 0)
            {
                Title = "Add";
                if (_companyDetailsObjectClone == null)
                {
                    _companyDetailsObject = new();
                }
                else
                {
                    _companyDetailsObjectClone.Clear();
                }
            }
            else
            {
                Title = "Edit";
                _companyDetailsObjectClone = _companyDetailsObject.Copy();
            }

            _actionProgress = false;
            await DialogEditCompany.ShowDialog();
        }
    }

    /// <summary>
    ///     Asynchronously edits the contact information of a company.
    ///     If the provided id is 0, a new contact is created and initialized with the company's details.
    ///     Otherwise, the method edits the existing contact with the provided id.
    ///     The method also opens a dialog for editing the contact.
    /// </summary>
    /// <param name="id">The id of the contact to edit. If 0, a new contact is created.</param>
    /// <returns>A Task representing the asynchronous operation.</returns>
    private async Task EditContact(int id)
    {
        if (!_actionProgress)
        {
            await Task.Yield();
            _actionProgress = true;
            if (id == 0)
            {
                if (SelectedContactClone == null)
                {
                    SelectedContactClone = new();
                }
                else
                {
                    SelectedContactClone.Clear();
                }

                if (_target != null)
                {
                    SelectedContactClone.Address = _companyDetailsObject.Address;
                    SelectedContactClone.City = _companyDetailsObject.City;
                    SelectedContactClone.StateID = _companyDetailsObject.StateID;
                    SelectedContactClone.State = _companyDetailsObject.State;
                    SelectedContactClone.ZipCode = _companyDetailsObject.ZipCode;
                    SelectedContactClone.Phone = _companyDetailsObject.Phone;
                    SelectedContactClone.Extension = _companyDetailsObject.Extension;
                    SelectedContactClone.Fax = _companyDetailsObject.Fax;
                    SelectedContactClone.ClientID = _companyDetailsObject.ID;
                    SelectedContactClone.IsPrimary = false;
                    SelectedContactClone.StatusCode = "ACT";
                }
            }
            else
            {
                SelectedContactClone = ContactPanel.SelectedRow.Copy();
            }

            _actionProgress = false;
            await DialogEditContact.ShowDialog();
        }
    }

    /// <summary>
    ///     Handles the file selection event. It disables the dialog buttons when a file is selected.
    /// </summary>
    /// <param name="arg">The event arguments associated with the file selection event.</param>
    private void FileSelect(SelectedEventArgs arg)
    {
        DialogDocument.DisableButtons();
    }

    /// <summary>
    ///     The FilterGrid method is an asynchronous task that is responsible for filtering the grid view of companies on the
    ///     Companies page.
    ///     It takes a ChangeEventArgs object as a parameter, which contains the company details to be used for filtering.
    ///     The method compares the current value with the last value, and if they are different, it updates the grid view
    ///     accordingly.
    ///     The method also stores the current state of the grid view in the local storage for future use.
    /// </summary>
    /// <param name="company">The ChangeEventArgs object containing the company details for filtering.</param>
    /// <returns>A Task that represents the asynchronous operation.</returns>
    private async Task FilterGrid(ChangeEventArgs<string, KeyValues> company)
    {
        string _currentValue = company.Value ?? "";
        if (_currentValue.Equals(_lastValue))
        {
            return;
        }

        if (!_actionProgress)
        {
            _actionProgress = true;
            SearchModel.CompanyName = company.Value ?? "";
            AutocompleteValue = SearchModel.CompanyName;
            _currentPage = 1;
            SearchModel.Page = _currentPage;
            //company.IsInteracted = true;
            await LocalStorage.SetItemAsync("CompaniesGrid", SearchModel);
            await Grid.Refresh();
            _actionProgress = false;
        }
    }

    /// <summary>
    ///     This asynchronous method is triggered when the first click action is performed on the Companies page.
    ///     It ensures that the action is not in progress, sets the current page to 1, updates the search model,
    ///     stores the current state of the Companies grid in the session storage, and then refreshes the grid.
    /// </summary>
    private async Task FirstClick()
    {
        if (!_actionProgress)
        {
            await Task.Yield();
            _actionProgress = true;
            if (_currentPage < 1)
            {
                _currentPage = 1;
            }

            _currentPage = 1;
            SearchModel.Page = 1;
            await SessionStorage.SetItemAsync("CompaniesGrid", SearchModel);
            await Grid.Refresh();
            _actionProgress = false;
        }
    }

    /// <summary>
    ///     An asynchronous method that handles the action of the last page button click in the pagination of the Companies
    ///     page.
    ///     It sets the current page to the last page, saves the current state of the Companies grid to the session storage,
    ///     and then refreshes the grid.
    ///     This method also prevents multiple simultaneous actions by using the _actionProgress flag.
    /// </summary>
    private async Task LastClick()
    {
        if (!_actionProgress)
        {
            await Task.Yield();
            _actionProgress = true;
            if (_currentPage < 1)
            {
                _currentPage = 1;
            }

            _currentPage = PageCount.ToInt32();
            SearchModel.Page = _currentPage;
            await SessionStorage.SetItemAsync("CompaniesGrid", SearchModel);
            await Grid.Refresh();
            _actionProgress = false;
        }
    }

    /// <summary>
    ///     Handles the click event for the "Next" button in the pagination control.
    ///     This method increments the current page number and refreshes the grid to display the data for the next page.
    ///     It also stores the updated page number in the session storage for persistence across page refreshes.
    ///     This method is asynchronous and utilizes a flag to prevent multiple simultaneous actions.
    /// </summary>
    private async Task NextClick()
    {
        if (!_actionProgress)
        {
            await Task.Yield();
            _actionProgress = true;
            if (_currentPage < 1)
            {
                _currentPage = 1;
            }

            _currentPage = SearchModel.Page >= PageCount.ToInt32() ? PageCount.ToInt32() : SearchModel.Page + 1;
            SearchModel.Page = _currentPage;
            await SessionStorage.SetItemAsync("CompaniesGrid", SearchModel);
            await Grid.Refresh();
            _actionProgress = false;
        }
    }

    /// <summary>
    ///     Asynchronously handles the beginning of an action on the Companies page.
    ///     This method is invoked when an action starts on the Companies page grid view, such as sorting.
    ///     If the action is a sorting action, it sets the sort field and direction based on the column name and direction
    ///     provided in the action event arguments.
    ///     The method then saves the current state of the Companies grid to the session storage and refreshes the grid.
    ///     This method is designed to prevent concurrent execution of multiple actions by using the '_actionProgress' flag.
    /// </summary>
    /// <param name="args">
    ///     The arguments associated with the action event, which include details such as the request type and
    ///     column name for sorting actions.
    /// </param>
    /// <returns>A Task representing the asynchronous operation.</returns>
    private async Task OnActionBegin(ActionEventArgs<Company> args)
    {
        if (!_actionProgress)
        {
            await Task.Yield();
            _actionProgress = true;
            if (args.RequestType == Action.Sorting)
            {
                SearchModel.SortField = args.ColumnName switch
                {
                    "CompanyName" => 2,
                    "StateID" => 3,
                    "Phone" => 4,
                    _ => 1
                };
                SearchModel.SortDirection = args.Direction == SortDirection.Ascending ? (byte)1 : (byte)0;
                await SessionStorage.SetItemAsync("CompaniesGrid", SearchModel);
                await Grid.Refresh();
            }

            _actionProgress = false;
        }
    }

    /// <summary>
    ///     This method is called after the component has finished rendering. It performs post-rendering logic.
    ///     If this is the first render, the method returns immediately. Otherwise, it yields control back to the caller before
    ///     setting the 'User' property of the 'SearchModel' object. If 'LoginCookyUser' is null or its 'UserID' is a
    ///     whitespace string,
    ///     'User' is set to "JOLLY". Otherwise, 'User' is set to the upper case version of 'UserID'.
    /// </summary>
    /// <param name="firstRender">A boolean indicating whether this is the first render of the component.</param>
    /// <returns>A Task representing the asynchronous operation.</returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            return;
        }

        await Task.Yield();

        //_currentPage = SearchModel.Page;
        //PageCount = _currentPage;
        SearchModel.User = User;
        await base.OnAfterRenderAsync(true);
    }

    [Inject]
    private RedisService Redis
    {
        get;
        set;
    }

    /// <summary>
    ///     Asynchronously initializes the Companies page.
    ///     This method retrieves necessary data from the memory cache, such as states, skills, titles, recruiters,
    ///     eligibility, experience, education, job options, status codes, and workflows.
    ///     It also retrieves the user's login information and the current state of the Companies grid from the session
    ///     storage.
    ///     The method sets the current page, the last value, the sort direction, the sort field, and the autocomplete value
    ///     based on the retrieved Companies grid state.
    /// </summary>
    /// <returns>A task that represents the asynchronous operation.</returns>
    protected override async Task OnInitializedAsync()
    {
        LoginCookyUser = await NavManager.RedirectInner(LocalStorage);
        while (_roles == null)
        {
            _roles = await Redis.GetOrCreateAsync<List<Role>>("Roles");
        }

        RoleID = LoginCookyUser.RoleID;
        UserRights = LoginCookyUser.GetUserRights(_roles);
        DisplayAdd = UserRights.EditCompany ? "unset" : "none";

        if (!UserRights.ViewCompany) // User doesn't have View Company rights. This is done by looping through the Roles of the current user and determining the rights for ViewCompany.
        {
            NavManager.NavigateTo($"{NavManager.BaseUri}home", true);
        }

        while (_states == null)
        {
            _states = await Redis.GetOrCreateAsync<List<IntValues>>("States");
        }

        _statesCopy.Clear();
        _statesCopy.Add(new(0, "All"));
        _statesCopy.AddRange(_states);

        while (_skills == null)
        {
            _skills = await Redis.GetOrCreateAsync<List<IntValues>>("Skills");
        }

        while (_titles == null)
        {
            _titles = await Redis.GetOrCreateAsync<List<IntValues>>("Titles");
        }

        while (_recruiters == null)
        {
            List<User> _users = await Redis.GetOrCreateAsync<List<User>>("Users");
            if (_users == null)
            {
                continue;
            }

            _recruiters = [];
            foreach (User _user in _users.Where(user => user.Role is "Recruiter" or "Recruiter & Sales Manager"))
            {
                _recruiters?.Add(new(_user.UserName, _user.UserName));
            }
        }

        _eligibility = await Redis.GetOrCreateAsync<List<IntValues>>("Eligibility");
        _experience = await Redis.GetOrCreateAsync<List<IntValues>>("Experience");
        _education = await Redis.GetOrCreateAsync<List<IntValues>>("Education");

        while (_jobOptions == null || _jobOptions.Count == 0)
        {
            _jobOptions = await Redis.GetOrCreateAsync<List<KeyValues>>("JobOptions");
        }

        _statusCodes = await Redis.GetOrCreateAsync<List<StatusCode>>("StatusCodes");
        _workflows = await Redis.GetOrCreateAsync<List<AppWorkflow>>("Workflow");

        string _cookyString = await SessionStorage.GetItemAsStringAsync("CompaniesGrid");

        if (!_cookyString.NullOrWhiteSpace())
        {
            SearchModel = JsonConvert.DeserializeObject<CompanySearch>(_cookyString);
        }
        else
        {
            await SessionStorage.SetItemAsync("CompaniesGrid", SearchModel);
        }

        _currentPage = SearchModel.Page;
        _lastValue = SearchModel.CompanyName;

        User = LoginCookyUser?.UserID.NullOrWhiteSpace() != false ? "JOLLY" : LoginCookyUser.UserID.ToUpperInvariant();

        SortDirectionProperty = SearchModel.SortDirection == 1 ? SortDirection.Ascending : SortDirection.Descending;
        SortField = SearchModel.SortField switch
        {
            2 => "CompanyName",
            3 => "Location",
            4 => "Phone",
            _ => "Updated"
        };
        AutocompleteValue = SearchModel.CompanyName;

        await base.OnInitializedAsync();
    }

    /// <summary>
    ///     Handles the event when the page number changes in the Companies page.
    /// </summary>
    /// <param name="obj">The event arguments containing the new page number.</param>
    /// <returns>A Task that represents the asynchronous operation.</returns>
    /// <remarks>
    ///     This method is called when the user navigates to a different page in the Companies page grid view.
    ///     It updates the current page number and refreshes the grid to display the data for the new page.
    ///     The method uses session storage to persist the current state of the Companies grid, including the current page
    ///     number.
    /// </remarks>
    private async Task PageNumberChanged(ChangeEventArgs obj)
    {
        if (!_actionProgress)
        {
            await Task.Yield();
            _actionProgress = true;
            int _currentValue = obj.Value.ToInt32();
            if (_currentValue < 1)
            {
                _currentValue = 1;
            }
            else if (_currentValue > PageCount)
            {
                _currentValue = PageCount;
            }

            _currentPage = _currentValue;
            SearchModel.Page = _currentPage;
            await SessionStorage.SetItemAsync("CompaniesGrid", SearchModel);
            await Grid.Refresh();
            _actionProgress = false;
        }
    }

    /// <summary>
    ///     Handles the click event for the "Previous" button in the pagination control of the Companies page.
    ///     This method decreases the current page number by one if it's greater than one, and refreshes the grid to display
    ///     the data for the new page.
    ///     It also saves the updated page number to the local storage.
    ///     The method is asynchronous and uses a flag to prevent multiple simultaneous invocations.
    /// </summary>
    private async Task PreviousClick()
    {
        if (!_actionProgress)
        {
            await Task.Yield();
            _actionProgress = true;
            if (_currentPage < 1)
            {
                _currentPage = 1;
            }

            _currentPage = SearchModel.Page <= 1 ? 1 : SearchModel.Page - 1;
            SearchModel.Page = _currentPage;
            await LocalStorage.SetItemAsync("CompaniesGrid", SearchModel);
            await Grid.Refresh();
            _actionProgress = false;
        }
    }

    /// <summary>
    ///     Asynchronously refreshes the grid view on the Companies page.
    ///     This method is used to update the grid view with the latest company data.
    /// </summary>
    private static async Task RefreshGrid() => await Grid.Refresh();

    /// <summary>
    ///     Asynchronously saves the company details.
    /// </summary>
    /// <param name="context">The context for the edit operation.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    /// <remarks>
    ///     This method makes a POST request to the "Company/SaveCompany" endpoint with the company details as JSON in the body
    ///     of the request.
    ///     If the operation is successful, the method updates the company details in the local state and refreshes the grid
    ///     view.
    /// </remarks>
    private async Task SaveCompany(EditContext context)
    {
        await Task.Yield();
        //if (DialogEditCompany.FooterDialog.ButtonsDisabled())
        //{
        //	return;
        //}

        //DialogEditCompany.FooterDialog.DisableButtons();

        RestClient _client = new($"{Start.ApiHost}");
        RestRequest _request = new("Company/SaveCompany", Method.Post)
        {
            RequestFormat = DataFormat.Json
        };
        _request.AddJsonBody(_companyDetailsObjectClone);
        _request.AddQueryParameter("user", User);

        await _client.PostAsync<int>(_request);

        _companyDetailsObject = _companyDetailsObjectClone.Copy();
        if (_target != null)
        {
            _target.Address = _companyDetailsObject.Address;
            _target.City = _companyDetailsObject.City;
            _target.State = _companyDetailsObject.State;
            _target.ZipCode = _companyDetailsObject.ZipCode;
            _target.Phone = _companyDetailsObject.Phone;
            _target.EmailAddress = _companyDetailsObject.EmailAddress;

            SetupAddress();
        }
        else
        {
            await Grid.Refresh();
        }

        //DialogEditCompany.FooterDialog.EnableButtons();
        await Task.Yield();
        StateHasChanged();
    }

    /// <summary>
    ///     Asynchronously saves the company contact information.
    ///     This method sends a POST request to the "Company/SaveContact" endpoint with the selected contact's details.
    ///     If the response is successful, it updates the company contacts list and triggers a UI refresh.
    /// </summary>
    /// <param name="context">The context for the edit operation.</param>
    /// <returns>A Task that represents the asynchronous operation.</returns>
    private async Task SaveCompanyContact(EditContext context)
    {
        await DialogEditContact.Spinner.ShowAsync();
        //if (DialogEditContact.FooterDialog.ButtonsDisabled())
        //{
        //	return;
        //}

        //DialogEditContact.FooterDialog.DisableButtons();

        RestClient _client = new($"{Start.ApiHost}");
        RestRequest _request = new("Company/SaveContact", Method.Post)
        {
            RequestFormat = DataFormat.Json
        };
        _request.AddJsonBody(SelectedContactClone);
        _request.AddQueryParameter("user", User);

        Dictionary<string, object> _response = await _client.PostAsync<Dictionary<string, object>>(_request);

        if (_response == null)
        {
            return;
        }

        _companyContactsObject = General.DeserializeObject<List<CompanyContact>>(_response["Contacts"]);

        //DialogEditContact.FooterDialog.EnableButtons();
        //await DialogEditContact.Spinner.HideAsync();
        //await DialogEditContact.Dialog.HideAsync();
        StateHasChanged();
    }

    /// <summary>
    ///     Asynchronously saves a document related to a company.
    ///     This method takes an EditContext object as an argument, which represents the document to be saved.
    ///     The document is uploaded to a specified API endpoint using a POST request.
    ///     Additional parameters such as filename, mime type, document name, notes, company ID, user, and path are also
    ///     included in the request.
    ///     If the upload is successful, the method updates the company documents object with the response from the server.
    /// </summary>
    /// <param name="document">The EditContext object representing the document to be saved.</param>
    /// <returns>A Task representing the asynchronous operation.</returns>
    private async Task SaveDocument(EditContext document)
    {
        await Task.Yield();
        try
        {
            if (document.Model is RequisitionDocuments _document)
            {
                RestClient _client = new($"{Start.ApiHost}");
                RestRequest _request = new("Company/UploadDocument", Method.Post)
                {
                    AlwaysMultipartFormData = true
                };
                _request.AddFile("file", AddedDocument.ToStreamByteArray(), FileName);
                _request.AddParameter("filename", FileName, ParameterType.GetOrPost);
                _request.AddParameter("mime", Mime, ParameterType.GetOrPost);
                _request.AddParameter("name", _document.DocumentName, ParameterType.GetOrPost);
                _request.AddParameter("notes", _document.DocumentNotes, ParameterType.GetOrPost);
                _request.AddParameter("companyID", _target.ID.ToString(), ParameterType.GetOrPost);
                _request.AddParameter("user", User, ParameterType.GetOrPost);
                _request.AddParameter("path", Start.UploadsPath, ParameterType.GetOrPost);
                Dictionary<string, object> _response = await _client.PostAsync<Dictionary<string, object>>(_request);
                if (_response == null)
                {
                    return;
                }

                _companyDocumentsObject = General.DeserializeObject<List<RequisitionDocuments>>(_response["Document"]);
            }
        }
        catch
        {
            //
        }

        await Task.Yield();
    }

    /// <summary>
    ///     Executes an asynchronous operation that performs a search for a company based on the provided edit context.
    ///     The method ensures that only one search operation is in progress at a time.
    ///     The search model is updated with the provided edit context and stored in the session storage.
    ///     After updating the search model, the grid is refreshed to display the new search results.
    /// </summary>
    /// <param name="args">The edit context containing the search parameters.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    private async Task SearchCompany(EditContext args)
    {
        if (!_actionProgress)
        {
            await Task.Yield();
            _actionProgress = true;
            SearchModel = SearchModelClone.Copy();
            await SessionStorage.SetItemAsync("CompaniesGrid", SearchModel);
            await Grid.Refresh();
            _actionProgress = false;
        }
    }

    /// <summary>
    ///     Sets the alphabet for the company search model and refreshes the grid.
    /// </summary>
    /// <param name="alphabet">The alphabet character to set for the company search.</param>
    /// <returns>A Task that represents the asynchronous operation.</returns>
    /// <remarks>
    ///     This method sets the provided alphabet character as the company name in the search model,
    ///     resets the current page to 1, and refreshes the grid. It also manages a flag to indicate
    ///     the progress of the action to prevent multiple simultaneous operations.
    /// </remarks>
    private async Task SetAlphabet(char alphabet)
    {
        if (!_actionProgress)
        {
            await Task.Yield();
            _actionProgress = true;
            SearchModel.CompanyName = alphabet.ToString();
            _currentPage = 1;
            SearchModel.Page = 1;
            await SessionStorage.SetItemAsync("CompaniesGrid", SearchModel);
            AutocompleteValue = alphabet.ToString();
            await Grid.Refresh();
            _actionProgress = false;
        }
    }

    /// <summary>
    ///     The SetupAddress method is used to generate a formatted address string from the company details.
    ///     It concatenates the address, city, state, and zip code of the company into a single string, with each part
    ///     separated by a comma.
    ///     The address is then converted to a MarkupString and assigned to the Address property.
    ///     If any part of the address (city, state, or zip code) is not provided, it is simply skipped in the final string.
    ///     The state is retrieved from a collection of states (_states) using the StateID of the company.
    ///     If the final string starts with a comma, it is removed.
    /// </summary>
    private void SetupAddress()
    {
        //NumberOfLines = 1;
        string _generateAddress = _companyDetailsObject.Address;

        if (_generateAddress == "")
        {
            _generateAddress = _companyDetailsObject.City;
        }
        else
        {
            _generateAddress += _companyDetailsObject.City == "" ? "" : $"<br/>{_companyDetailsObject.City}";
        }

        if (_companyDetailsObject.StateID > 0)
        {
            if (_generateAddress == "")
            {
                _generateAddress = _states.FirstOrDefault(state => state.Key == _companyDetailsObject.StateID)?.Value?.Split('-')[0].Trim();
            }
            else
            {
                try //Because sometimes the default values are not getting set. It's so random that it can't be debugged. And it never fails during debugging session.
                {
                    _generateAddress += ", " + _states.FirstOrDefault(state => state.Key == _companyDetailsObject.StateID)?.Value?.Split('-')[0].Trim();
                }
                catch
                {
                    //
                }
            }
        }

        if (_companyDetailsObject.ZipCode != "")
        {
            if (_generateAddress == "")
            {
                _generateAddress = _companyDetailsObject.ZipCode;
            }
            else
            {
                _generateAddress += ", " + _companyDetailsObject.ZipCode;
            }
        }

        if (_generateAddress != null && _generateAddress.StartsWith(","))
        {
            _generateAddress = _generateAddress[1..].Trim();
        }

        Address = _generateAddress.ToMarkupString();
    }

    /// <summary>
    ///     Handles the click event of a Speed Dial item in the Companies page.
    ///     This method is invoked when a Speed Dial item is clicked and performs different actions based on the ID of the
    ///     clicked item.
    ///     If the clicked item's ID is "itemEditCompany", it sets the selected tab to 0 and calls the EditCompany method.
    ///     If the clicked item's ID is "itemAddContact", it sets the selected tab to 0 and calls the EditContact method with 0
    ///     as the argument.
    ///     If the clicked item's ID is "itemAddDocument", it sets the selected tab to 1 and calls the AddDocument method with
    ///     null as the argument.
    ///     The method ensures that these actions are not performed concurrently by using the _isSpeedDial flag.
    /// </summary>
    /// <param name="args">The arguments of the Speed Dial item click event, which include the clicked item's details.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    private async Task SpeedDialItemClicked(SpeedDialItemEventArgs args)
    {
        if (!_isSpeedDial)
        {
            await Task.Yield();
            //_actionProgress = true;
            _isSpeedDial = true;
            switch (args.Item.ID)
            {
                case "itemEditCompany":
                    _selectedTab = 0;
                    await EditCompany(_target.ID);
                    break;
                case "itemAddContact":
                    _selectedTab = 0;
                    await EditContact(0);
                    break;
                case "itemAddDocument":
                    _selectedTab = 1;
                    await AddDocument();
                    break;
            }

            _isSpeedDial = false;
            //_actionProgress = false;
        }
    }

    /// <summary>
    ///     Handles the event of a tab being selected in the Companies page.
    ///     This method is invoked when a tab is selected in the user interface.
    ///     It sets the index of the selected tab to the '_selectedTab' field.
    /// </summary>
    /// <param name="args">An instance of SelectEventArgs containing data related to the tab selection event.</param>
    /// <returns>A Task representing the asynchronous operation.</returns>
    private async Task TabSelected(SelectEventArgs args)
    {
        await Task.Yield();
        _selectedTab = args.SelectedIndex;
    }

    /// <summary>
    ///     Handles the upload of a document. It reads the uploaded file(s), copies the content to a memory stream,
    ///     and stores the file name and MIME type for later use.
    /// </summary>
    /// <param name="file">The file(s) uploaded by the user.</param>
    /// <returns>A Task that represents the asynchronous operation.</returns>
    private async Task UploadDocument(UploadChangeEventArgs file)
    {
        foreach (UploadFiles _file in file.Files)
        {
            Stream _str = _file.File.OpenReadStream(20 * 1024 * 1024);
            await _str.CopyToAsync(AddedDocument);
            FileName = _file.FileInfo.Name;
            Mime = _file.FileInfo.MimeContentType;
            AddedDocument.Position = 0;
            _str.Close();
        }
    }

    /// <summary>
    ///     The CompanyAdaptor class is a custom data adaptor for the Companies page grid view.
    ///     It extends the DataAdaptor class and overrides the ReadAsync method to provide a custom data retrieval mechanism.
    ///     The ReadAsync method retrieves company data for the grid view. If the CompaniesList is not null and contains data,
    ///     the method does not retrieve new data. Otherwise, it calls the GetCompanyReadAdaptor method to retrieve company
    ///     data.
    ///     If there are any companies in the retrieved data, the first row in the grid view is selected.
    /// </summary>
    public class CompanyAdaptor : DataAdaptor
    {
        private bool _reading;

        /// <summary>
        ///     Asynchronously reads company data for the grid view on the Companies page.
        ///     This method checks if the CompaniesList is not null and contains data, in which case it does not retrieve new data.
        ///     If the CompaniesList is null or empty, it calls the GetCompanyReadAdaptor method to retrieve company data.
        ///     If there are any companies in the retrieved data, it selects the first row in the grid view.
        /// </summary>
        /// <param name="dm">The DataManagerRequest object that contains the parameters for the data request.</param>
        /// <param name="key">An optional key to identify a specific data item. Default is null.</param>
        /// <returns>
        ///     A Task that represents the asynchronous read operation. The value of the TResult parameter contains the
        ///     retrieved data.
        /// </returns>
        public override Task<object> ReadAsync(DataManagerRequest dm, string key = null)
        {
            if (_reading)
            {
                return null;
            }

            _reading = true;
            bool _getInformation = true;
            if (CompaniesList != null)
            {
                _getInformation = CompaniesList.Count == 0;
            }

            Task<object> _companyReturn = General.GetCompanyReadAdaptor(SearchModel, "JOLLY", dm, _getInformation);
            if (Count > 0)
            {
                Grid.SelectRowAsync(0);
            }

            _reading = false;
            return _companyReturn;
        }
    }
}